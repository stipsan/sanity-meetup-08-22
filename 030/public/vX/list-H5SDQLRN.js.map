{
  "version": 3,
  "sources": ["../../node_modules/sanity/lib/esm/desk/panes/list/ListPane.js"],
  "sourcesContent": ["var _templateObject;\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nimport React from 'react';\nimport { Box, Button, Card, Code, Stack } from '@sanity/ui';\nimport styled from 'styled-components';\nimport { ArrowLeftIcon } from '@sanity/icons';\nimport { Pane, PaneContent, PaneHeader, usePaneLayout, PaneHeaderActions, BackLink, PaneItem } from '../../components';\nimport { _DEBUG } from '../../constants';\nimport { useDeskTool } from '../../useDeskTool';\nconst Divider = styled.hr(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  background-color: var(--card-border-color);\\n  height: 1px;\\n  margin: 0;\\n  border: none;\\n\"])));\n/**\n * @internal\n */\n\nexport function ListPane(props) {\n  const {\n    childItemId,\n    index,\n    isActive,\n    isSelected,\n    pane,\n    paneKey\n  } = props;\n  const {\n    features\n  } = useDeskTool();\n  const {\n    collapsed: layoutCollapsed\n  } = usePaneLayout();\n  const {\n    defaultLayout,\n    displayOptions,\n    items,\n    menuItems,\n    menuItemGroups,\n    title\n  } = pane;\n  const paneShowIcons = displayOptions === null || displayOptions === void 0 ? void 0 : displayOptions.showIcons;\n\n  const shouldShowIconForItem = item => {\n    var _item$displayOptions;\n\n    const itemShowIcon = (_item$displayOptions = item.displayOptions) === null || _item$displayOptions === void 0 ? void 0 : _item$displayOptions.showIcon; // Specific true/false on item should have precedence over list setting\n\n    if (typeof itemShowIcon !== 'undefined') {\n      return itemShowIcon !== false; // Boolean(item.icon)\n    } // If no item setting is defined, defer to the pane settings\n\n\n    return paneShowIcons !== false; // Boolean(item.icon)\n  };\n\n  return /*#__PURE__*/React.createElement(Pane, {\n    currentMaxWidth: 350,\n    \"data-testid\": \"desk-tool-list-pane\",\n    id: paneKey,\n    maxWidth: 640,\n    minWidth: 320,\n    selected: isSelected\n  }, _DEBUG && /*#__PURE__*/React.createElement(Card, {\n    padding: 4,\n    tone: \"transparent\"\n  }, /*#__PURE__*/React.createElement(Code, null, pane.source || '(none)')), /*#__PURE__*/React.createElement(PaneHeader, {\n    actions: /*#__PURE__*/React.createElement(PaneHeaderActions, {\n      menuItems: menuItems,\n      menuItemGroups: menuItemGroups\n    }),\n    backButton: features.backButton && index > 0 && /*#__PURE__*/React.createElement(Button, {\n      as: BackLink,\n      \"data-as\": \"a\",\n      icon: ArrowLeftIcon,\n      mode: \"bleed\"\n    }),\n    title: title\n  }), /*#__PURE__*/React.createElement(PaneContent, {\n    overflow: layoutCollapsed ? undefined : 'auto'\n  }, /*#__PURE__*/React.createElement(Stack, {\n    padding: 2,\n    space: 1\n  }, items && items.map((item, itemIndex) => {\n    if (item.type === 'divider') {\n      return (\n        /*#__PURE__*/\n        // eslint-disable-next-line react/no-array-index-key\n        React.createElement(Box, {\n          key: \"divider-\".concat(itemIndex),\n          paddingY: 1\n        }, /*#__PURE__*/React.createElement(Divider, null))\n      );\n    }\n\n    const pressed = !isActive && childItemId === item.id;\n    const selected = isActive && childItemId === item.id;\n    return /*#__PURE__*/React.createElement(PaneItem, {\n      icon: shouldShowIconForItem(item) ? item.icon : false,\n      id: item.id,\n      key: item.id,\n      layout: defaultLayout,\n      pressed: pressed,\n      schemaType: item.schemaType,\n      selected: selected,\n      title: item.title,\n      value: // If this is a document list item, pass on the ID and type,\n      // otherwise leave it undefined to use the passed title and gang\n      item._id && item.schemaType ? {\n        _id: item._id,\n        _type: item.schemaType.name,\n        title: item.title\n      } : undefined\n    });\n  }))));\n}"],
  "mappings": "gKAIA,IAAAA,EAAkB,OAJlB,IAAIC,EAEJ,SAASC,EAAuBC,EAASC,EAAK,CAAE,OAAKA,IAAOA,EAAMD,EAAQ,MAAM,CAAC,GAAY,OAAO,OAAO,OAAO,iBAAiBA,EAAS,CAAE,IAAK,CAAE,MAAO,OAAO,OAAOC,CAAG,CAAE,CAAE,CAAC,CAAC,CAAG,CAStL,IAAMC,EAAUC,EAAO,GAAGL,IAAoBA,EAAkBC,EAAuB,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,CAAkG,CAAC,EAAE,EAKtL,SAASK,EAASC,EAAO,CAC9B,GAAM,CACJ,YAAAC,EACA,MAAAC,EACA,SAAAC,EACA,WAAAC,EACA,KAAAC,EACA,QAAAC,CACF,EAAIN,EACE,CACJ,SAAAO,CACF,EAAIC,EAAY,EACV,CACJ,UAAWC,CACb,EAAIC,EAAc,EACZ,CACJ,cAAAC,EACA,eAAAC,EACA,MAAAC,EACA,UAAAC,EACA,eAAAC,EACA,MAAAC,CACF,EAAIX,EACEY,EAAgFL,GAAe,UAE/FM,EAAwBC,GAAQ,CACpC,IAAIC,EAEJ,IAAMC,GAAgBD,EAAuBD,EAAK,kBAAoB,MAAQC,IAAyB,OAAS,OAASA,EAAqB,SAE9I,OAAI,OAAOC,EAAiB,IACnBA,IAAiB,GAInBJ,IAAkB,EAC3B,EAEA,OAAoB,EAAAK,QAAM,cAAcC,EAAM,CAC5C,gBAAiB,IACjB,cAAe,sBACf,GAAIjB,EACJ,SAAU,IACV,SAAU,IACV,SAAUF,CACZ,EAAG,IAAuB,EAAAkB,QAAM,cAAcE,EAAM,CAClD,QAAS,EACT,KAAM,aACR,EAAgB,EAAAF,QAAM,cAAcG,EAAM,KAAMpB,EAAK,QAAU,QAAQ,CAAC,EAAgB,EAAAiB,QAAM,cAAcI,EAAY,CACtH,QAAsB,EAAAJ,QAAM,cAAcK,EAAmB,CAC3D,UAAWb,EACX,eAAgBC,CAClB,CAAC,EACD,WAAYR,EAAS,YAAcL,EAAQ,GAAkB,EAAAoB,QAAM,cAAcM,EAAQ,CACvF,GAAIC,EACJ,UAAW,IACX,KAAMC,EACN,KAAM,OACR,CAAC,EACD,MAAOd,CACT,CAAC,EAAgB,EAAAM,QAAM,cAAcS,EAAa,CAChD,SAAUtB,EAAkB,OAAY,MAC1C,EAAgB,EAAAa,QAAM,cAAcU,EAAO,CACzC,QAAS,EACT,MAAO,CACT,EAAGnB,GAASA,EAAM,IAAI,CAACM,EAAMc,IAAc,CACzC,GAAId,EAAK,OAAS,UAChB,OAGE,EAAAG,QAAM,cAAcY,EAAK,CACvB,IAAK,WAAW,OAAOD,CAAS,EAChC,SAAU,CACZ,EAAgB,EAAAX,QAAM,cAAczB,EAAS,IAAI,CAAC,EAItD,IAAMsC,EAAU,CAAChC,GAAYF,IAAgBkB,EAAK,GAC5CiB,EAAWjC,GAAYF,IAAgBkB,EAAK,GAClD,OAAoB,EAAAG,QAAM,cAAce,EAAU,CAChD,KAAMnB,EAAsBC,CAAI,EAAIA,EAAK,KAAO,GAChD,GAAIA,EAAK,GACT,IAAKA,EAAK,GACV,OAAQR,EACR,QAASwB,EACT,WAAYhB,EAAK,WACjB,SAAUiB,EACV,MAAOjB,EAAK,MACZ,MAEAA,EAAK,KAAOA,EAAK,WAAa,CAC5B,IAAKA,EAAK,IACV,MAAOA,EAAK,WAAW,KACvB,MAAOA,EAAK,KACd,EAAI,MACN,CAAC,CACH,CAAC,CAAC,CAAC,CAAC,CACN",
  "names": ["import_react", "_templateObject", "_taggedTemplateLiteral", "strings", "raw", "Divider", "styled_components_browser_esm_default", "ListPane", "props", "childItemId", "index", "isActive", "isSelected", "pane", "paneKey", "features", "useDeskTool", "layoutCollapsed", "usePaneLayout", "defaultLayout", "displayOptions", "items", "menuItems", "menuItemGroups", "title", "paneShowIcons", "shouldShowIconForItem", "item", "_item$displayOptions", "itemShowIcon", "React", "Pane", "Card", "Code", "PaneHeader", "PaneHeaderActions", "Button", "BackLink", "ArrowLeftIcon", "PaneContent", "Stack", "itemIndex", "Box", "pressed", "selected", "PaneItem"]
}
